import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

public class GrandKilluaTheft extends JFrame implements KeyListener {
    private static final long serialVersionUID = 1L;

    private static final int WINDOW_WIDTH = 800;
    private static final int WINDOW_HEIGHT = 600;
    private static final int CELL_SIZE = 30;
    private static final int PLAYER_SPEED = 5;
    private static final int CAR_SPEED = PLAYER_SPEED * 10;
    private static final int PLAYER_ATTACK_DAMAGE = 255;
    private static final int POLICE_ATTACK_DAMAGE = 100;
    private static final int CIVILIAN_ATTACK_DAMAGE = 10;
    private static final double CIVILIAN_FLEE_CHANCE = 0.11;
    private static final int PLAYER_HP = 255;
    private static final int POLICE_HP = 255;
    private static final int CIVILIAN_HP = 10;

    private char[][] map;
    private int playerX, playerY;
    private boolean upPressed, downPressed, leftPressed, rightPressed;

    public GrandKilluaTheft() {
        setTitle("Grand Killua Theft");
        setSize(WINDOW_WIDTH, WINDOW_HEIGHT);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setResizable(false);
        addKeyListener(this);

        map = new char[WINDOW_HEIGHT / CELL_SIZE][WINDOW_WIDTH / CELL_SIZE];
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[i].length; j++) {
                map[i][j] = '#';
            }
        }

        playerX = WINDOW_WIDTH / 2;
        playerY = WINDOW_HEIGHT / 2;

        Timer timer = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                update();
                repaint();
            }
        });
        timer.start();
    }

    private void update() {
        if (upPressed) playerY -= PLAYER_SPEED;
        if (downPressed) playerY += PLAYER_SPEED;
        if (leftPressed) playerX -= PLAYER_SPEED;
        if (rightPressed) playerX += PLAYER_SPEED;

        // Limit player's movement within the window
        playerX = Math.max(0, Math.min(playerX, WINDOW_WIDTH - CELL_SIZE));
        playerY = Math.max(0, Math.min(playerY, WINDOW_HEIGHT - CELL_SIZE));

        checkEncounters();
    }

    private void checkEncounters() {
        // Check for encounters with other characters (police and civilians)
        int playerTileX = playerX / CELL_SIZE;
        int playerTileY = playerY / CELL_SIZE;
        for (int i = playerTileY - 1; i <= playerTileY + 1; i++) {
            for (int j = playerTileX - 1; j <= playerTileX + 1; j++) {
                if (i >= 0 && i < map.length && j >= 0 && j < map[i].length) {
                    char character = map[i][j];
                    if (character == 'P' || character == 'C') {
                        if (Math.random() < CIVILIAN_FLEE_CHANCE && character == 'C') {
                            System.out.println("Civilian flees!");
                        } else {
                            int damage = (character == 'P') ? POLICE_ATTACK_DAMAGE : CIVILIAN_ATTACK_DAMAGE;
                            playerAttack(damage);
                        }
                    }
                }
            }
        }
    }

    private void playerAttack(int damage) {
        // Player attacks and inflicts damage to the character
        // In this example, we'll just reduce the character's HP
        // You can add more complex logic for battles in a real game
        System.out.println("Player attacks for " + damage + " damage!");
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[i].length; j++) {
                if (map[i][j] == '#') {
                    g.setColor(Color.BLACK);
                } else if (map[i][j] == 'A') {
                    g.setColor(Color.WHITE);
                } else if (map[i][j] == 'P') {
                    g.setColor(Color.BLUE);
                } else if (map[i][j] == 'C') {
                    g.setColor(Color.GREEN);
                }
                g.fillRect(j * CELL_SIZE, i * CELL_SIZE, CELL_SIZE, CELL_SIZE);
            }
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();
        switch (key) {
            case KeyEvent.VK_Z:
                upPressed = true;
                break;
            case KeyEvent.VK_S:
                downPressed = true;
                break;
            case KeyEvent.VK_Q:
                leftPressed = true;
                break;
            case KeyEvent.VK_D:
                rightPressed = true;
                break;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        int key = e.getKeyCode();
        switch (key) {
            case KeyEvent.VK_Z:
                upPressed = false;
                break;
            case KeyEvent.VK_S:
                downPressed = false;
                break;
            case KeyEvent.VK_Q:
                leftPressed = false;
                break;
            case KeyEvent.VK_D:
                rightPressed = false;
                break;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            GrandKilluaTheft game = new GrandKilluaTheft();
            game.setVisible(true);
        });
    }
}
